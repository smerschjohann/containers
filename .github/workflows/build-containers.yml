name: Build, Merge, and Push

permissions:
  packages: write

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  REGISTRY_REPO: 'ghcr.io/${{ github.repository }}'
  TAG: 'latest'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: "ubuntu-24.04"
            platform: "linux/amd64"
          - os: "ubuntu-24.04-arm"
            platform: "linux/arm64"
    runs-on: "${{ matrix.os }}"
    env:
      PLATFORM: ${{ matrix.platform }}
      ARCH: ${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Build and push containers
        env:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
        run: |
          runcmd=/bin/bash
          #if [[ $PLATFORM == 'linux/amd64' ]]; then
          #  mkdir -p ../containers
          #  runcmd="podman run -e=REGISTRY_REPO -e=TAG -e=PLATFORM -e=ARCH -e=username -e=password -e=registry -i \
          #                -u 0  --security-opt seccomp=unconfined --security-opt apparmor=unconfined \
          #                --net=host --privileged --device /dev/fuse:rw \
          #                -v ../containers:/var/lib/containers:Z \
          #                -v $PWD:/root:ro \
          #                ghcr.io/smerschjohann/containers/fedbox:latest /bin/bash"
          #fi

          # prepare per-arch digest file
          rm -f /tmp/digests-${ARCH}.json || true
          touch /tmp/digests-${ARCH}.json

          $runcmd << 'EOF'
            #cd /root
            echo -n $password | buildah login -u $username --password-stdin $registry 
            tasks=$(jq -c '.[]' images/tasks.json)
            for task in $tasks; do
              name=$(echo $task | jq -r '.name')
              dir=$(echo $task | jq -r '.dir')
              target=$(echo $task | jq -r '.target')
              nocache=$(echo $task | jq -c '.nocache')
              image_name="$REGISTRY_REPO/$name"
              
              if git diff --quiet --exit-code HEAD^ HEAD $dir; then
                echo "Keine Änderungen in $dir, überspringe den Build-Prozess für $name"
                continue
              fi


              cacheparams=""
              if [[ $nocache != true ]]; then
               cacheparams="--layers --cache-from $REGISTRY_REPO/cache --cache-to $REGISTRY_REPO/cache"
              fi

              buildah bud \
                --platform $PLATFORM \
                -f $dir/Dockerfile \
                --format docker \
                --tls-verify=true \
                -t $image_name:$ARCH-$TAG \
                --target $target \
                $cacheparams \
                $dir
              
              # capture digest from buildah push output
              push_output=$(buildah push $image_name:$ARCH-$TAG docker://$image_name:$ARCH-$TAG 2>&1)
              echo "$push_output"
              
              # extract digest from output (buildah prints digest as sha256:... in the output)
              digest=$(echo "$push_output" | grep -oP 'sha256:[a-f0-9]{64}' | head -n1 || true)
              
              if [ -z "$digest" ]; then
                echo "Warnung: konnte Digest für $image_name:$ARCH-$TAG nicht aus buildah push ermitteln"
                digest=""
              else
                echo "Erfasster Digest für $image_name:$ARCH-$TAG: $digest"
              fi

              # store as newline-delimited JSON for easier merging later
              echo "{\"image\":\"$image_name\",\"tag\":\"$ARCH-$TAG\",\"digest\":\"$digest\"}" >> /tmp/digests-${ARCH}.json
            done
          EOF
      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          path: /tmp/digests-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}.json

  merge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Log in to ghcr.io
        env:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
        run: |
          echo -n $password | docker login -u $username --password-stdin $registry 

      - name: Download amd64 digests
        uses: actions/download-artifact@v4
        with:
          name: digests-amd64
          path: /tmp/digests/amd64

      - name: Download arm64 digests
        uses: actions/download-artifact@v4
        with:
          name: digests-arm64
          path: /tmp/digests/arm64

      - name: Merge & push manifests
        env:
          TASKS: ${{ github.event_name == 'push' && env.DEFAULT_TASKS || github.event.inputs.tasks }}
        run: |
          tasks=$(jq -c '.[]' images/tasks.json)
          for task in $tasks; do
            name=$(echo $task | jq -r '.name')
            dir=$(echo $task | jq -r '.dir')
            autoTag=$(echo $task | jq -r '.autoTag // empty')
            tag=$(echo $task | jq -r '.tag // empty')
            image_name="$REGISTRY_REPO/$name"

            if [ "$autoTag" = "true" ]; then
              tag=$(grep -oP '(?<=:).+?(?=@)' $dir/Dockerfile)
            fi
            final_manifest="$image_name:${tag:-$TAG}"

            if git diff --quiet --exit-code HEAD^..HEAD $dir; then
              echo "Keine Änderungen in $dir, überspringe den Build-Prozess für $name"
              continue
            fi

            # Collect source images with digests
            sources=()
            for arch in "amd64" "arm64"; do
              digestfile="/tmp/digests/$arch/digests-$arch.json"
              if [ -f "$digestfile" ]; then
                entry=$(jq -r --arg img "$image_name" 'select(.image==$img)' "$digestfile" 2>/dev/null || true)
                if [ -n "$entry" ] && [ "$entry" != "null" ]; then
                  digest=$(echo "$entry" | jq -r '.digest // empty')
                  arch_tag=$(echo "$entry" | jq -r '.tag // empty')
                  
                  if [ -n "$digest" ] && [ "$digest" != "null" ] && [ -n "$arch_tag" ]; then
                    echo "Adding source: $image_name:$arch_tag@$digest"
                    sources+=("$image_name:$arch_tag@$digest")
                  else
                    echo "Warning: No digest for $arch, using tag only"
                    sources+=("$image_name:$arch-$TAG")
                  fi
                else
                  echo "Warning: No entry found for $image_name in $arch digest file"
                  sources+=("$image_name:$arch-$TAG")
                fi
              else
                echo "Warning: Digest file not found for $arch"
                sources+=("$image_name:$arch-$TAG")
              fi
            done

            # Create multi-arch manifest using imagetools
            if [ ${#sources[@]} -gt 0 ]; then
              echo "Creating manifest: $final_manifest from ${sources[@]}"
              docker buildx imagetools create -t "$final_manifest" "${sources[@]}"
            else
              echo "Error: No source images found for $name"
              exit 1
            fi
          done